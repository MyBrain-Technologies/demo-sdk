/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Shared file between builds so that they can all use the same dependencies and
 * maven repositories.
 **/
ext.deps = [:]
def versions = [:]
versions.activity = '1.1.0'
versions.android_gradle_plugin = '7.3.0'
versions.annotations = "1.0.0"
versions.apache_commons = "2.1.0"
versions.appcompat = "1.2.0"
versions.arch_core = "2.1.0"
versions.atsl_core = "1.2.0"
versions.atsl_junit = "1.1.1"
versions.atsl_rules = "1.2.0"
versions.atsl_runner = "1.2.0"
versions.benchmark = "1.1.0-alpha01"
versions.cardview = "1.0.0"
versions.constraint_layout = "2.0.4"
versions.core_ktx = "1.1.0"
versions.coroutines = "1.4.1"
versions.dagger = "2.22"
versions.dexmaker = "2.2.0"
versions.espresso = "3.2.0"
versions.fragment = "1.2.0"
versions.glide = "4.8.0"
versions.hamcrest = "1.3"
versions.junit = "4.12"
versions.junit_jupiter = "5.6.2"
versions.kotlin = '1.7.20'
versions.lifecycle = "2.2.0"
versions.lottie = "4.1.0"
versions.material = "1.0.0"
versions.mockito = "3.8.0"
versions.mockito_all = "1.10.19"
versions.mockito_android = "3.8.0"
versions.mockwebserver = "4.9.1"
versions.navigation = "2.3.3"
versions.okhttp_logging_interceptor = "3.9.0"
versions.paging = "3.0.0-beta01"
versions.powermock = "2.0.4"
versions.recyclerview = "1.1.0"
versions.retrofit = "2.9.0"
versions.robolectric = "4.2"
versions.room = "2.2.6"
versions.rx_android = "2.0.1"
versions.rxjava2 = "2.1.3"
versions.timber = "4.7.1"
versions.transition = "1.3.0"
versions.truth = "1.0.1"
versions.work = "2.7.0"
ext.versions = versions

def build_versions = [:]
build_versions.min_sdk = 22
build_versions.compile_sdk = 29
build_versions.target_sdk = 29
build_versions.build_tools = "29.0.3"
ext.build_versions = build_versions

def deps = [:]

def activity = [:]
activity.activity_ktx = "androidx.activity:activity-ktx:$versions.activity"
deps.activity = activity

deps.android_gradle_plugin = "com.android.tools.build:gradle:$versions.android_gradle_plugin"

deps.google_services = 'com.google.gms:google-services:4.3.8'

deps.crashlytics_gradle = 'com.google.firebase:firebase-crashlytics-gradle:2.6.1'

deps.annotations = "androidx.annotation:annotation:$versions.annotations"

deps.app_compat = "androidx.appcompat:appcompat:$versions.appcompat"

def arch_core = [:]
arch_core.runtime = "androidx.arch.core:core-runtime:$versions.arch_core"
arch_core.testing = "androidx.arch.core:core-testing:$versions.arch_core"
deps.arch_core = arch_core

def atsl = [:]
atsl.core = "androidx.test:core:$versions.atsl_core"
atsl.ext_junit = "androidx.test.ext:junit:$versions.atsl_junit"
atsl.runner = "androidx.test:runner:$versions.atsl_runner"
atsl.rules = "androidx.test:rules:$versions.atsl_rules"
deps.atsl = atsl

deps.benchmark = "androidx.benchmark:benchmark-junit4:$versions.benchmark"
deps.benchmark_gradle = "androidx.benchmark:benchmark-gradle-plugin:$versions.benchmark"

deps.cardview = "androidx.cardview:cardview:$versions.cardview"

deps.constraint_layout = "androidx.constraintlayout:constraintlayout:$versions.constraint_layout"

deps.core_ktx = "androidx.core:core-ktx:$versions.core_ktx"

def coroutines = [:]
coroutines.android = "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"
coroutines.test = "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutines"
deps.coroutines = coroutines

def dagger = [:]
dagger.runtime = "com.google.dagger:dagger:$versions.dagger"
dagger.android = "com.google.dagger:dagger-android:$versions.dagger"
dagger.android_support = "com.google.dagger:dagger-android-support:$versions.dagger"
dagger.compiler = "com.google.dagger:dagger-compiler:$versions.dagger"
dagger.android_support_compiler = "com.google.dagger:dagger-android-processor:$versions.dagger"
deps.dagger = dagger

deps.dexmaker = "com.linkedin.dexmaker:dexmaker-mockito:$versions.dexmaker"

def espresso = [:]
espresso.core = "androidx.test.espresso:espresso-core:$versions.espresso"
espresso.contrib = "androidx.test.espresso:espresso-contrib:$versions.espresso"
espresso.intents = "androidx.test.espresso:espresso-intents:$versions.espresso"
deps.espresso = espresso

def fragment = [:]
fragment.runtime = "androidx.fragment:fragment:${versions.fragment}"
fragment.runtime_ktx = "androidx.fragment:fragment-ktx:${versions.fragment}"
fragment.testing = "androidx.fragment:fragment-testing:${versions.fragment}"
deps.fragment = fragment

def glide = [:]
glide.runtime = "com.github.bumptech.glide:glide:$versions.glide"
glide.compiler = "com.github.bumptech.glide:compiler:$versions.glide"
deps.glide = glide

deps.hamcrest = "org.hamcrest:hamcrest-all:$versions.hamcrest"

deps.junit = "junit:junit:$versions.junit"

deps.mockk = "io.mockk:mockk:1.10.0"

def junit_jupiter = [:]
junit_jupiter.api = "org.junit.jupiter:junit-jupiter-api:$versions.junit_jupiter"
junit_jupiter.engine = "org.junit.jupiter:junit-jupiter-engine:$versions.junit_jupiter"
deps.junit_jupiter = junit_jupiter

deps.junit_platform_runner = "org.junit.platform:junit-platform-runner:1.6.2"

def kotlin = [:]
kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
kotlin.test = "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin"
kotlin.plugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
kotlin.allopen = "org.jetbrains.kotlin:kotlin-allopen:$versions.kotlin"
deps.kotlin = kotlin

def lifecycle = [:]
lifecycle.runtime = "androidx.lifecycle:lifecycle-runtime:$versions.lifecycle"
lifecycle.java8 = "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"
lifecycle.compiler = "androidx.lifecycle:lifecycle-compiler:$versions.lifecycle"
lifecycle.viewmodel_ktx = "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"
lifecycle.livedata_ktx = "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle"
deps.lifecycle = lifecycle

deps.material = "com.google.android.material:material:$versions.material"

def mockito = [:]
mockito.core = "org.mockito:mockito-core:$versions.mockito"
mockito.all = "org.mockito:mockito-all:$versions.mockito_all"
mockito.android = "org.mockito:mockito-android:$versions.mockito_android"
deps.mockito = mockito

deps.mock_web_server = "com.squareup.okhttp3:mockwebserver:$versions.mockwebserver"

def powermock = [:]
powermock.api_mockito2 = "org.powermock:powermock-api-mockito2:$versions.powermock"
powermock.module_junit4 = "org.powermock:powermock-module-junit4:$versions.powermock"
deps.powermock = powermock

def navigation = [:]
navigation.runtime = "androidx.navigation:navigation-runtime:$versions.navigation"
navigation.runtime_ktx = "androidx.navigation:navigation-runtime-ktx:$versions.navigation"
navigation.fragment = "androidx.navigation:navigation-fragment:$versions.navigation"
navigation.fragment_ktx = "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
navigation.testing = "androidx.navigation:navigation-testing:$versions.navigation"
navigation.ui = "androidx.navigation:navigation-ui:$versions.navigation"
navigation.ui_ktx = "androidx.navigation:navigation-ui-ktx:$versions.navigation"
navigation.safe_args_plugin = "androidx.navigation:navigation-safe-args-gradle-plugin:$versions.navigation"
deps.navigation = navigation

deps.okhttp_logging_interceptor = "com.squareup.okhttp3:logging-interceptor:${versions.okhttp_logging_interceptor}"

deps.paging_runtime = "androidx.paging:paging-runtime:$versions.paging"

deps.recyclerview = "androidx.recyclerview:recyclerview:$versions.recyclerview"

def retrofit = [:]
retrofit.runtime = "com.squareup.retrofit2:retrofit:$versions.retrofit"
retrofit.gson = "com.squareup.retrofit2:converter-gson:$versions.retrofit"
retrofit.adapter_rxjava2 = "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"
retrofit.mock = "com.squareup.retrofit2:retrofit-mock:$versions.retrofit"
deps.retrofit = retrofit

deps.robolectric = "org.robolectric:robolectric:$versions.robolectric"

def room = [:]
room.runtime = "androidx.room:room-runtime:$versions.room"
room.compiler = "androidx.room:room-compiler:$versions.room"
room.ktx = "androidx.room:room-ktx:$versions.room"
room.rxjava2 = "androidx.room:room-rxjava2:$versions.room"
room.testing = "androidx.room:room-testing:$versions.room"
deps.room = room

deps.rx_android = "io.reactivex.rxjava2:rxandroid:$versions.rx_android"
deps.rx_kotlin = "io.reactivex.rxjava2:rxkotlin:2.4.0"
deps.rxjava2 = "io.reactivex.rxjava2:rxjava:$versions.rxjava2"

deps.timber = "com.jakewharton.timber:timber:$versions.timber"

deps.transition = "androidx.transition:transition:$versions.transition"

deps.truth = "com.google.truth:truth:$versions.truth"

def work = [:]
work.runtime = "androidx.work:work-runtime:$versions.work"
work.testing = "androidx.work:work-testing:$versions.work"
work.firebase = "androidx.work:work-firebase:$versions.work"
work.runtime_ktx = "androidx.work:work-runtime-ktx:$versions.work"
deps.work = work

//add other libraries here
deps.apache_commons = "org.mod4j.org.apache.commons:lang:$versions.apache_commons"
deps.circular_fillable_loaders = 'com.mikhaellopez:circularfillableloaders:1.2.0'
deps.drag_list_view = 'com.github.woxthebox:draglistview:1.4.4'
deps.event_bus = 'org.greenrobot:eventbus:3.1.1'
deps.expandable_layout = 'com.github.aakira:expandable-layout:1.6.0@aar'
deps.gson = 'com.google.code.gson:gson:2.8.6'
deps.legacy_support = 'androidx.legacy:legacy-support-v4:1.0.0'
deps.lottie = "com.airbnb.android:lottie:$versions.lottie"
deps.mp_android_chart = 'com.github.PhilJay:MPAndroidChart:v3.0.1'
deps.vectordrawable_animated = 'androidx.vectordrawable:vectordrawable-animated:1.0.0'
deps.view_animator = 'com.github.florent37:viewanimator:1.0.5'

ext.deps = deps

def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
    handler.maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    handler.maven { url 'https://maven.fabric.io/public' }
    handler.maven { url "https://jitpack.io" }

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def maven_user = properties.getProperty('maven_user')
    def maven_password = properties.getProperty('maven_password')
    handler.maven {
        url "https://package.mybraintech.com/repository/maven-2-releases/"
        credentials {
            username maven_user
            password maven_password
        }
    }
    handler.maven {
        url "https://package.mybraintech.com/repository/maven-2-snapshots/"
        credentials {
            username maven_user
            password maven_password
        }
    }
}

ext.addRepos = this.&addRepos